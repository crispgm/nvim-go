*nvim-go.txt* Go development plugin

==============================================================================
     __    __  __     __  ______  __       __           ______    ______
    |  \  |  \|  \   |  \|      \|  \     /  \         /      \  /      \
    | ##\ | ##| ##   | ## \######| ##\   /  ##        |  ######\|  ######\
    | ###\| ##| ##   | ##  | ##  | ###\ /  ### ______ | ## __\##| ##  | ##
    | ####\ ## \##\ /  ##  | ##  | ####\  ####|      \| ##|    \| ##  | ##
    | ##\## ##  \##\  ##   | ##  | ##\## ## ## \######| ## \####| ##  | ##
    | ## \####   \## ##   _| ##_ | ## \###| ##        | ##__| ##| ##__/ ##
    | ##  \###    \###   |   ## \| ##  \# | ##         \##    ## \##    ##
     \##   \##     \#     \###### \##      \##          \######   \######

==============================================================================
CONTENTS                                                    *nvim-go-contents*

  Introduction ········································ |nvim-go-introduction|
  Requirements ········································ |nvim-go-requirements|
  Limitations and known issues ······························ |nvim-go-issues|
  Usage ······················································ |nvim-go-usage|
    Commands ·············································· |nvim-go-commands|
    Lua API ················································ |nvim-go-lua-api|
  Configuration ············································· |nvim-go-config|
  License ·················································· |nvim-go-license|

==============================================================================
INTRODUCTION                                  *nvim-go* *nvim-go-introduction*

A minimal implementation of Golang development plugin written in Lua for
Neovim.

Neovim starts to embed a built-in LSP (Language Server Protocol) client from
v0.5 so that we are able to do most of vim-go's features by LSP client,
`nvim-go` collaborates with these features to get Golang development done.

==============================================================================
REQUIREMENTS                                            *nvim-go-requirements*

nvim-go works only with Neovim and was written in Lua, so it requires Neovim
version 0.5+.

==============================================================================
LIMITATIONS AND KNOWN ISSUES                                  *nvim-go-issues*

* Upstream Issue: `golangci-lint` may not run linters successfully if your
  project cannot be built.

==============================================================================
USAGE                                                          *nvim-go-usage*

                                                              *nvim-go-config*
For basic setup:
>
    require('go').setup{}
<
Configuration can be passed to the setup function. Here is the default
settings:
>
    require('go').setup{
        auto_format = true,
        auto_lint = true,
        linter = 'revive',
        lint_prompt_style = 'qf',
        formatter = 'goimports',
        test_flags = {'-v'},
        test_timeout = '30s',
        test_env = {},
        test_popup = true,
        test_popup_width = 80,
        test_popup_height = 10,
        tags_name = 'json',
        tags_options = {'json=omitempty'},
        tags_transform = 'snakecase',
        tags_flags = {'-skip-unexported'},
        quick_type_flags = {'--just-types'},
    }
<
                                                            *nvim-go-commands*
Commands~

`:GoInstallBinaries`                                      *:GoInstallBinaries*
    Install dependent binaries for nvim-go. `go` and `yarn` is required in
    advance. It will not install again if binary exists. And you may also
    install them manually.

`:GoUpdateBinaries`                                        *:GoUpdateBinaries*
    Perform updates for dependent binaries.

`:GoLint`                                                            *:GoLint*
    Lint with linter. Default linter is `revive`. If there are issues,
    it will be prompt with quickfixes.

`:Golangcilint`                                                *:Golangcilint*
    Lint with `golangci-lint`. Notice that we recommend `golangci-lint`, because
    it is able to run multiple linters including all the following linters
    and easier to apply custom configurations.

    Notice: It may not run linters successfully if your project cannot be
    built.

`:Gorevive`                                                        *:Gorevive*
    Lint with `revive`.

`:Golint`                                                            *:Golint*
    Lint with `golint`.

`:Goerrcheck`                                                    *:Goerrcheck*
    Lint with `errcheck`.

`:Gostaticcheck`                                              *:Gostaticcheck*
    Lint with `staticcheck`.

`:GoFormat`                                                        *:GoFormat*
    Format with formatter. Default formatter is `goimports`.

`:Goimports`                                                      *:Goimports*
    Format with `goimports`.

`:Gofmt`                                                              *:GoFmt*
    Format with `gofmt`.

`:Gofumpt`                                                          *:GoFumpt*
    Format with `gofumpt`.

`:GoGet(pkg)`                                                         *:GoGet*
    Get a Go package in a project.

`:GoImport(pkg)`                                                   *:GoImport*
    Import a Go package and add it to import statement. `:GoGet` will be
    performed before import.

`:GoTest`                                                            *:GoTest*
    Run the test for current package.

`:GoTestAll`                                                      *:GoTestAll*
    Run all the tests. (`go test ./...`)

`:GoTestFunc`                                                    *:GoTestFunc*
    Run the test function where the cursor is on.

`:GoTestFile`                                                    *:GoTestFile*
    Run current `*_test.go` file.

`:GoToTest`                                                        *:GoToTest*
    Go from `*.go` to `*_test.go` or go back. It will create new file if
    `*_test.go` does not exist.

`:GoAddTags([tag, [args...]])`                                    *:GoAddTags*
    Add struct tag to an object or selected fields.
    Extra arguments would be passed to command line arguments. e.g. `-sort`.

`:GoRemoveTags([args...])`                                     *:GoRemoveTags*
    Remove struct tag from an object or selected fields.
    Extra arguments would be passed to command line arguments.

`:GoClearTags`                                                  *:GoClearTags*
    Clear struct tag of an object or selected fields.

`:GoAddTagOptions(option_name)`                             *:GoAddTagOptions*
    Add struct tag options (e.g. json=omitempty) to an object or selected
    fields.
    Extra arguments would be passed to command line arguments.

`:GoRemoveTagOptions(option_name)`                       *:GoRemoveTagOptions*
    Remove struct tag options from an object or selected fields.
    Extra arguments would be passed to command line arguments.

`:GoClearTagOptions`                                      *:GoClearTagOptions*
    Clear struct tag options of an object or selected fields.

`:GoQuickType(src, [package, [top_level]])`                     *:GoQuickType*
    Generates strongly-typed models and serializers from JSON via quicktype.
    Other format that supported by quicktype has not been implemented yet.

                                                             *nvim-go-lua-api*
Lua API~

`go.setup(`{opts}`)`                                               *nvim-go.setup*
    Setup the library with options.

    This functional will setup the Lua API and commands in a way that respects
    the options you pass.

    The list of available options is available in the |nvim-go-config| section.

==============================================================================
LICENSE                                                      *nvim-go-license*

Copyright (c) 2021 David Zhang

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

==============================================================================
vim:tw=78:sw=4:ts=8:ft=help:norl:
